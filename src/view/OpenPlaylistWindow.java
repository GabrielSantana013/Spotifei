/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.PlaylistDetailsController;
import java.awt.*;
import javax.swing.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import model.Playlist;
import view.customClasses.RoundedButton;
import view.customClasses.RoundedButton.TextAlign;

/**
 *
 * @author Pedro Schneider, Gabriel Santana Dias
 */
public class OpenPlaylistWindow extends javax.swing.JFrame {
    
    private final int width = 484;
    private final int height = 384;
    private Playlist playlist;

    /**
     * Creates new form OpenPlaylistWindow
     */
    public OpenPlaylistWindow(Playlist playlist) {
        initComponents();
        this.playlist = playlist;
        PlaylistDetailsController c = new PlaylistDetailsController(this, playlist);
        c.loadPlaylistSongs();
        c.setPlaylistAtributtes();        
        this.setSize(width, height);
        // changes window icon
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/view/assets/images/logoSpotifei.png")).getImage());

    }

    public JList<String> getList_musics() {
        return list_musics;
    }

    public void setList_musics(JList<String> list_musics) {
        this.list_musics = list_musics;
    }

    public JTextArea getTxt_description() {
        return txt_description;
    }

    public void setTxt_description(JTextArea txt_description) {
        this.txt_description = txt_description;
    }

    public JButton getBtt_playlistName() {
        return btt_playlistName;
    }

    public void setBtt_playlistName(JButton btt_playlistName) {
        this.btt_playlistName = btt_playlistName;
    }

    public JButton getBtt_removeMusic() {
        return btt_removeMusic;
    }

    public void setBtt_removeMusic(JButton btt_removeMusic) {
        this.btt_removeMusic = btt_removeMusic;
    }        
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        scroll_playlistsMusics = new javax.swing.JScrollPane();
        list_musics = new javax.swing.JList<>();
        btt_removeMusic = new RoundedButton("Remover música");
        btt_playlistName = new RoundedButton("nome_playlist");
        icon_playlists = new javax.swing.JLabel();
        scroll_desc = new javax.swing.JScrollPane();
        txt_description = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("nome_playlist");
        setBackground(new java.awt.Color(18, 18, 18));
        setMaximumSize(new java.awt.Dimension(532, 384));
        setMinimumSize(new java.awt.Dimension(532, 384));
        setResizable(false);

        background.setBackground(new java.awt.Color(18, 18, 18));
        background.setMaximumSize(new java.awt.Dimension(484, 384));
        background.setPreferredSize(new java.awt.Dimension(484, 384));

        scroll_playlistsMusics.setBackground(new java.awt.Color(60, 63, 65));
        scroll_playlistsMusics.setBorder(null);
        scroll_playlistsMusics.setForeground(new java.awt.Color(58, 58, 58));
        scroll_playlistsMusics.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroll_playlistsMusics.setMaximumSize(new java.awt.Dimension(322, 322));
        scroll_playlistsMusics.setMinimumSize(new java.awt.Dimension(322, 322));
        scroll_playlistsMusics.setPreferredSize(new java.awt.Dimension(322, 322));
        scroll_playlistsMusics.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(60,63,65);
                this.trackColor = new Color(18,18,18);
            }

            @Override
            protected JButton createDecreaseButton(int orientation) {
                return createZeroButton();
            }

            @Override
            protected JButton createIncreaseButton(int orientation) {
                return createZeroButton();
            }

            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                button.setMinimumSize(new Dimension(0, 0));
                button.setMaximumSize(new Dimension(0, 0));
                return button;
            }

            // barra de scroll mais larga
            @Override
            public Dimension getPreferredSize(JComponent c) {
                return new Dimension(12, super.getPreferredSize(c).height);
            }

            // arredonda o botão
            @Override
            protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.translate(thumbBounds.x, thumbBounds.y);
                g2.setColor(thumbColor);
                int arc = 10;
                g2.fillRoundRect(0, 0, thumbBounds.width, thumbBounds.height, arc, arc);
                g2.dispose();
            }

            @Override
            protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setColor(trackColor);
                g2.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
                g2.dispose();
            }
        });

        scroll_playlistsMusics.getHorizontalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(60,63,65);
                this.trackColor = new Color(18,18,18);
            }

            @Override
            protected JButton createDecreaseButton(int orientation) {
                return createZeroButton();
            }

            @Override
            protected JButton createIncreaseButton(int orientation) {
                return createZeroButton();
            }

            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                button.setMinimumSize(new Dimension(0, 0));
                button.setMaximumSize(new Dimension(0, 0));
                return button;
            }

            // barra de scroll mais larga
            @Override
            public Dimension getPreferredSize(JComponent c) {
                return new Dimension(super.getPreferredSize(c).width, 12);
            }

            // arredonda o botão
            @Override
            protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.translate(thumbBounds.x, thumbBounds.y);
                g2.setColor(thumbColor);
                int arc = 10;
                g2.fillRoundRect(0, 0, thumbBounds.width, thumbBounds.height, arc, arc);
                g2.dispose();
            }

            @Override
            protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setColor(trackColor);
                g2.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
                g2.dispose();
            }
        });

        list_musics.setBackground(new java.awt.Color(18, 18, 18));
        list_musics.setBorder(null);
        list_musics.setFont(new Font("Gotham Light", Font.PLAIN, 14));
        list_musics.setForeground(new java.awt.Color(236, 239, 241));
        list_musics.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_musics.setSelectionBackground(new java.awt.Color(100, 165, 135));
        scroll_playlistsMusics.setViewportView(list_musics);

        btt_removeMusic.setBackground(new java.awt.Color(168, 170, 170));
        btt_removeMusic.setFont(new java.awt.Font("Gotham Black", Font.PLAIN, 12));
        btt_removeMusic.setForeground(new java.awt.Color(28, 28, 28));
        btt_removeMusic.setBorder(null);
        btt_removeMusic.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btt_removeMusic.setMaximumSize(new java.awt.Dimension(120, 40));
        btt_removeMusic.setMinimumSize(new java.awt.Dimension(120, 40));
        btt_removeMusic.setPreferredSize(new java.awt.Dimension(120, 40));
        ((RoundedButton) btt_removeMusic).setCornerRadiusVertical(20);
        ((RoundedButton) btt_removeMusic).setCornerRadiusHorizontal(20);
        btt_removeMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btt_removeMusicActionPerformed(evt);
            }
        });

        ((RoundedButton) btt_playlistName).setTextAlignment(TextAlign.CENTER);
        btt_playlistName.setBackground(new java.awt.Color(185, 192, 198));
        btt_playlistName.setFont(new java.awt.Font("Gotham Black", Font.PLAIN, 14));
        btt_playlistName.setForeground(new java.awt.Color(28, 28, 28));
        btt_playlistName.setText("nome_playlist");
        btt_playlistName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(28, 28, 28), 1, true));
        btt_playlistName.setBorderPainted(false);
        btt_playlistName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btt_playlistName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ((RoundedButton) btt_playlistName).setCornerRadiusVertical(20);
        ((RoundedButton) btt_playlistName).setCornerRadiusHorizontal(20);
        btt_playlistName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btt_playlistNameActionPerformed(evt);
            }
        });
        ((RoundedButton) btt_playlistName).setHover(0);

        icon_playlists.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/assets/images/playlistIcon.png"))); // NOI18N

        scroll_desc.setBorder(null);

        txt_description.setEditable(false);
        txt_description.setBackground(new java.awt.Color(28, 28, 28));
        txt_description.setColumns(20);
        txt_description.setFont(new Font("Gotham Light", Font.PLAIN, 14));
        txt_description.setForeground(new java.awt.Color(236, 239, 241));
        txt_description.setLineWrap(true);
        txt_description.setRows(5);
        txt_description.setWrapStyleWord(true);
        txt_description.setAutoscrolls(false);
        txt_description.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        txt_description.setDisabledTextColor(new java.awt.Color(236, 239, 241));
        txt_description.setFocusable(false);
        scroll_desc.setViewportView(txt_description);

        scroll_desc.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(60,63,65);
                this.trackColor = new Color(24,24,24);
            }

            @Override
            protected JButton createDecreaseButton(int orientation) {
                return createZeroButton();
            }

            @Override
            protected JButton createIncreaseButton(int orientation) {
                return createZeroButton();
            }

            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                button.setMinimumSize(new Dimension(0, 0));
                button.setMaximumSize(new Dimension(0, 0));
                return button;
            }

            // barra de scroll mais larga
            @Override
            public Dimension getPreferredSize(JComponent c) {
                return new Dimension(8, super.getPreferredSize(c).height);
            }

            // arredonda o botão
            @Override
            protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.translate(thumbBounds.x, thumbBounds.y);
                g2.setColor(thumbColor);
                int arc = 12;
                g2.fillRoundRect(0, 0, thumbBounds.width, thumbBounds.height, arc, arc);
                g2.dispose();
            }

            @Override
            protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setColor(trackColor);
                g2.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
                g2.dispose();
            }
        });

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(icon_playlists, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btt_playlistName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(scroll_playlistsMusics, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll_desc, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btt_removeMusic, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addContainerGap())
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(scroll_desc)
                        .addGap(18, 18, 18)
                        .addComponent(btt_removeMusic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btt_playlistName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(icon_playlists, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(scroll_playlistsMusics, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 334, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btt_playlistNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btt_playlistNameActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btt_playlistNameActionPerformed

    private void btt_removeMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btt_removeMusicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btt_removeMusicActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(OpenPlaylistWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(OpenPlaylistWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(OpenPlaylistWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(OpenPlaylistWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new OpenPlaylistWindow().setVisible(true);
//            }
//        });
//    }
    
    private PlaylistDetailsController c;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JButton btt_playlistName;
    private javax.swing.JButton btt_removeMusic;
    private javax.swing.JLabel icon_playlists;
    private javax.swing.JList<String> list_musics;
    private javax.swing.JScrollPane scroll_desc;
    private javax.swing.JScrollPane scroll_playlistsMusics;
    private javax.swing.JTextArea txt_description;
    // End of variables declaration//GEN-END:variables
}
